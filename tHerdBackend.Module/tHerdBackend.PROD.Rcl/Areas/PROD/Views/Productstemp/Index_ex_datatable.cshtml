@using System.Text.Json
@using tHerdBackend.Core.DTOs
@using tHerdBackend.Core.DTOs.PROD
@using tHerdBackend.UIKit.Rcl.Views.Shared.Components.DataTable
@model IEnumerable<ProdProductDetailDto>

@{
    ViewData["Title"] = "商品管理";
}

@await Component.InvokeAsync("UpdateImage", new { 
    title = "圖片資訊", 
    file = new SysAssetFileDto { FileId = 1038, FileUrl = "https://cloudinary.images-iherb.com/image/upload/f_auto,q_auto:eco/images/atn/atn00611/r/97.jpg", AltText = "主圖", Caption = "封面", IsActive = true }
})

<button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#imgMetaModal">
    打開圖片視窗
</button>

<div class="d-flex justify-content-between mb-2">
    <div>
        <button type="button" class="btn btn-sm btn-success me-2" onclick="ImportProductExcelAsync()">讀取產品</button>
        <button type="button" class="btn btn-primary" onclick="importTypeExcelAsync()">匯入 Excel</button>
        <button type="button" class="btn btn-sm btn-warning me-2" onclick="refreshData()">更新資料</button>
        <button type="button" class="btn btn-sm btn-secondary" onclick="downloadTemplate()">下載範例檔</button>
    </div>
</div>


@section Scripts {
    <script>

        document.addEventListener("click", function (e) {
            if (e.target && e.target.id === "modalImg") {
                e.preventDefault();
                e.stopPropagation();
                const imgUrl = e.target.src;
                if (imgUrl) window.open(imgUrl, "_blank");
            }
        });

        async function importTypeExcelAsync() {
            const response = await fetch('/PROD/Productstemp/importTypeExcelAsync', {
                method: 'POST'
            });

            if (response.ok) {
                alert("匯入成功");
                location.reload();
            } else {
                alert("匯入失敗");
            }
        }        
    </script>
}


@{
    // 1) 資料 → JSON（保留 PascalCase）
    var dataJson = JsonSerializer.Serialize(
        Model ?? Enumerable.Empty<ProdProductDetailDto>(),
        new JsonSerializerOptions { PropertyNamingPolicy = null }
    );

    // 2) 欄位定義（第一欄為 dt-control，縮窄寬度）
    var columns = new List<Dictionary<string, object?>> {
        new() {
            ["className"] = "dt-control",
            ["orderable"] = false,
            ["data"] = null,
            ["defaultContent"] = "",
            ["width"] = "8px"
        },
        new() { ["data"] = "ProductId" },
        new() { ["data"] = "SupplierId" },
        new() { ["data"] = "BrandId" },
        new() { ["data"] = "ProductName" },
        new() { ["data"] = "IsPublished" },
        new() { ["data"] = "Creator" },
        new() { ["data"] = "CreatedDate" }
    };
    var columnsJson = JsonSerializer.Serialize(columns);

    // 3) ViewModel
    var vm = new DataTableViewModel
    {
        TableId = "ProductsTable",
        Headers = new[] { "", "商品編號", "供應商", "品牌", "商品名稱", "上架", "建檔人員", "建檔日期" },
        ColumnsJson = columnsJson,
        DataJson = dataJson,
        EnableChildRow = true,
        PageLength = 10,
        LengthMenu = new[] { 5, 10, 25, 50 },
        FixedLeftColumns = 1,
        FixedRightColumns = 0
    };
}
@await Component.InvokeAsync("DataTable", vm)
