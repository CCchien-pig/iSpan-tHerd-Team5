@* 編輯器主 Partial View (_BrandLayoutEditorPartial.cshtml) *@
@model tHerdBackend.SUP.Rcl.Areas.SUP.ViewModels.BrandLayoutEditViewModel

@using System.Text.Json;
@using Microsoft.AspNetCore.Antiforgery

@inject IAntiforgery Antiforgery

@* 引入必要的 URL 輔助函式 *@
@{
    // 修正 AntiForgery Token 獲取方式
    var antiForgeryToken = Antiforgery.GetAndStoreTokens(Context);
    var requestToken = antiForgeryToken.RequestToken;
    var headerName = antiForgeryToken.HeaderName;

    // 將 C# Model 序列化為 JSON 字串，傳給 Vue
    var initialBlocksJson = JsonSerializer.Serialize(Model.LayoutBlocks, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });

    // 【新增】安全地獲取當前版本的版本號，用於編輯時顯示
    var initialVersion = Model.LayoutVersion ?? string.Empty;
}

<div id="brand-layout-editor-app">
    @* <h2>編輯品牌版面: @Model.BrandName</h2> *@

    <div id="component-palette" class="mb-3">
        <button @@click="addBlock('Banner')" class="btn btn-sm btn-outline-primary me-2">新增 Banner</button>
        <button @@click="addBlock('Accordion')" class="btn btn-sm btn-outline-primary me-2">新增 品牌故事</button>
        @* TODO: 加入 FeaturedProducts 和 Video 區塊按鈕 *@
    </div>
    @* 【新增輸入框】綁定 v-model="layoutVersion" *@
    <div class="input-group w-50 mb-3">
        <span class="input-group-text">版號 (必填)</span>
        <input type="text" class="form-control"
               v-model="layoutVersion"
               placeholder="例如：v1.1 或 聖誕促銷版"
               required>
    </div>

    <div id="layout-blocks-container">
        <div v-for="block in blocks" :key="block.id" :data-block-id="block.id" class="draggable-block card mb-2">

            <div class="card-header block-header" @@click="toggleEdit(block.id)">
                <i class="fa-solid fa-grip-vertical me-2"></i>
                <strong class="me-2">
                    {{ block.type }} 區塊
                    <span v-if="block.props.title">- {{ block.props.title }}</span>
                </strong>
                <span class="badge bg-secondary">{{ block.id.substring(0, 8) }}</span>
                <i :class="['fa-solid', 'float-end', { 'fa-chevron-down': editingId !== block.id, 'fa-chevron-up': editingId === block.id }]"></i>
            </div>

            <div v-if="editingId === block.id" class="card-body">
                <div v-if="block.type === 'Banner'">
                    <h5>摺疊區塊編輯</h5>
                    <div class="mb-3">
                        <label>標題:</label>
                        <input type="text" class="form-control" v-model="block.props.title">
                    </div>
                    <div class="mb-3">
                        <label>內容:</label>
                        @* 確保內文也綁定 v-model *@
                        <textarea class="form-control" v-model="block.props.content"></textarea> 
                    </div>
                    @* TODO: 圖片選擇邏輯 *@
                </div>

                <div v-if="block.type === 'Accordion'">
                    @* TODO: Accordion 編輯表單邏輯 *@
                </div>

                <button @@click="removeBlock(block.id)" class="btn btn-sm btn-danger mt-2">移除區塊</button>
            </div>

        </div>

        <p v-if="blocks.length === 0" class="text-muted text-center mt-4">請點擊上方按鈕新增區塊</p>
    </div>

    <div class="d-flex justify-content-between mt-4">
        <button @@click="goToVersions" class="btn btn-outline-secondary ms-auto">
            <i class="fa-solid fa-arrow-left"></i> 返回版本管理
        </button>

        <button @@click="saveLayout" class="btn btn-success me-2" :disabled="isSaving">
            <span v-if="isSaving" class="spinner-border spinner-border-sm me-2"></span>
            儲存版面配置
        </button>
    </div>
</div>

<script>
    // ---------------------------------------------------------------------
    // 【核心修正】使用 IIFE 封裝所有邏輯，避免 const/var 重複宣告錯誤 (SyntaxError)
    // ---------------------------------------------------------------------
    (function () {
        // 在局部作用域中安全地解構賦值
        const { createApp, ref, onMounted, nextTick } = Vue;

        // 1. Razor 變數 (這些是靜態值，但在 IIFE 內被視為局部變數)
        const csrfToken = '@requestToken';
        const csrfHeaderName = '@headerName';
        const brandId = @Model.BrandId;
        const initialLayoutId = '@(Model.LayoutId.HasValue? Model.LayoutId.Value.ToString() : "null")';
        const initialBlocks = @Html.Raw(initialBlocksJson);
        // 【新增變數】獲取後端傳來或空的版本號
        const initialVersion = '@(Model.LayoutVersion ?? "")';
        // 【新增變數】從後端獲取當前所有版本號列表，用於前端驗證
        const existingVersions = @Html.Raw(JsonSerializer.Serialize(Model.AllLayoutVersions ?? new List<string>()));

        // 儲存區塊的預設屬性工廠
        const createProps = (type) => {
            switch (type) {
                case 'Banner': return { title: '新 Banner 標題', fileUrl: '', linkUrl: '', subtitle: '副標題' };
                case 'Accordion': return { title: '新 Accordion 標題', content: '請在此輸入內容。' };
                default: return {};
            }
        };

        const App = {
            setup() {
                // 核心響應式資料
                const blocks = ref(initialBlocks);
                const editingId = ref(null);
                const isSaving = ref(false);
                const layoutIdState = ref(initialLayoutId);
                const layoutVersion = ref(initialVersion);

                // 版本號建議值
                if (layoutIdState.value === 'null' && initialVersion === '') {
                    // 從現有版本號中找出最大版本號並 +0.1
                    let maxVersion = 0.0;
                    existingVersions.forEach(v => {
                        const match = v.match(/^v(\d+\.\d+)/);
                        if (match) {
                            const num = parseFloat(match[1]);
                            if (num > maxVersion) maxVersion = num;
                        }
                    });
                    // 建議版本號是最大版本號 + 0.1，並保留一位小數
                    const suggestedVersion = `v${(maxVersion + 0.1).toFixed(1)}`;
                    layoutVersion.value = suggestedVersion;
                }

                // 初始化 SortableJS
                const initSortable = () => {
                    const el = document.getElementById('layout-blocks-container');
                    if (el) {
                        Sortable.create(el, {
                            animation: 150,
                            handle: '.block-header',
                            onEnd: (evt) => {
                                const { oldIndex, newIndex } = evt;
                                if (oldIndex !== newIndex) {
                                    const movedItem = blocks.value[oldIndex];
                                    blocks.value.splice(oldIndex, 1);
                                    blocks.value.splice(newIndex, 0, movedItem);
                                }
                            }
                        });
                    }
                };

                // 新增區塊
                const addBlock = (type) => {
                    const newBlock = {
                        id: (type.toLowerCase() + '-' + Date.now().toString()).substring(0, 15),
                        type: type,
                        props: createProps(type)
                    };
                    blocks.value.push(newBlock);

                    nextTick(() => {
                        const container = document.getElementById('layout-blocks-container');
                        if (container) { container.scrollTop = container.scrollHeight; }
                    });
                };

                // 移除區塊
                const removeBlock = (id) => {
                    Swal.fire({
                        title: '確定移除此區塊嗎？',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: '確定移除'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            blocks.value = blocks.value.filter(b => b.id !== id);
                            if (editingId.value === id) { editingId.value = null; }
                            Swal.fire('已移除', '區塊已從版面中移除，請記得儲存。', 'success');
                        }
                    });
                };

                // 切換編輯面板
                const toggleEdit = (id) => { editingId.value = editingId.value === id ? null : id; };

                // 儲存版面配置
                const saveLayout = async () => {
                    if (!layoutVersion.value) {
                         Swal.fire('錯誤', '請輸入版型版本號。', 'warning');
                         return;
                    }

                    isSaving.value = true;

                    const currentLayoutId = layoutIdState.value;

                    const payload = {
                        BrandId: brandId,
                        ActiveLayoutId: currentLayoutId !== 'null' ? parseInt(currentLayoutId) : null,
                        // 【關鍵】使用用戶輸入的響應式變數，使用 v-model 綁定的 layoutVersion.value
                        LayoutVersion: layoutVersion.value,
                        LayoutJson: JSON.stringify(blocks.value),
                    };

                    const url = '/SUP/Brands/SaveLayout';

                    const headers = {
                        'Content-Type': 'application/json',
                        [csrfHeaderName]: csrfToken 
                    };

                    try {
                        const response = await fetch(url, {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(payload)
                        });

                        const resJson = await response.json();

                        if (response.ok && resJson.success) {
                            Swal.fire('儲存成功', resJson.message || '版面配置已更新並啟用。', 'success');

                            if (currentLayoutId === 'null' && resJson.layoutId) {
                                layoutIdState.value = resJson.layoutId.toString();
                            }

                            // 關閉 Modal 並刷新父頁面 DataTable
                            $('#brandLayoutModal').modal('hide');
                            // 如果 window.table 存在，則呼叫其 reload 方法
                            if (window.table) { window.table.ajax.reload(null, false); }

                        } else {
                            const message = resJson.message || `API 錯誤: ${response.status} ${response.statusText}`;
                            Swal.fire('操作失敗', message, 'error');
                        }

                    } catch (error) {
                        console.error('Save failed:', error);
                        Swal.fire('網路錯誤', '無法連線到伺服器或發生未預期錯誤。', 'error');
                    } finally {
                        isSaving.value = false;
                    }
                };

                // 返回版本管理
                const goToVersions = () => {
                    const brandId = @Model.BrandId;
                    const brandName = '@Model.BrandName'; // 假設已注入

                    // 呼叫主頁面的 loadLayoutEditor 重新載入版本列表
                    if (typeof loadLayoutEditor === 'function') {
                        const indexUrl = '@Url.Action("GetLayoutVersions", "Brands", new { area = "SUP", id = "__ID__" })'.replace('__ID__', brandId);
                        loadLayoutEditor(indexUrl, `版本管理：${brandName}`);
                    } else {
                        // 如果 loadLayoutEditor 不在全局作用域，則關閉 Modal
                        $('#brandLayoutModal').modal('hide');
                    }
                };

                onMounted(() => {
                    initSortable();
                });

                return {
                    blocks,
                    editingId,
                    isSaving,
                    addBlock,
                    removeBlock,
                    toggleEdit,
                    layoutVersion, // 【關鍵】暴露給模板
                    goToVersions,  // 暴露返回按鈕函式
                    saveLayout,
                };
            }
        };

        // 【關鍵】每次載入新的 HTML 內容時，重新掛載 Vue 應用程式
        // 確保 DOM 元素 #brand-layout-editor-app 存在時才掛載
        if (document.getElementById('brand-layout-editor-app')) {
             createApp(App).mount('#brand-layout-editor-app');
        } else {
            console.error("Vue 掛載失敗：找不到 DOM 元素 #brand-layout-editor-app");
        }
    })(); // IIFE 結束
</script>