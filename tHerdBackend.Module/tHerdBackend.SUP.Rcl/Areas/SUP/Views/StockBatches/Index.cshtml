@* StockBatches Index *@
@{
    ViewData["Title"] = "庫存管理";
}

@section Styles {
    <link rel="stylesheet" href="~/_content/tHerdBackend.SUP.Rcl/css/supstylesheet.css" />
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h5 id="tableTitle" class="mb-0">庫存紀錄</h5>
    <button id="btnToggleStock" class="btn btn-outline-primary">
        <span class="arrow"><i class="fa-solid fa-arrow-right"></i></span> 全站異動紀錄
    </button>
</div>

<!-- 初始化批號 -->
@* <button id="btnInitBatches" class="btn btn-primary">初始化批號</button>
<span id="initResult" style="margin-left:10px;"></span>  *@

<!-- 主庫存表格*2區塊 (.stockbatch-card) -->
<div class="card stockbatch-card">
    <!-- 庫存紀錄 stockBatchTable -->
    <div id="stockTableWrapper">
        <div class="d-flex align-items-center mb-2">
            <!-- 第一排：按鈕 -->
            <div class="btn-group me-2">
                <!-- 庫存操作 -->
                <button id="createStockBatchBtn" class="btn btn-outline-success">庫存操作</button>

                <!-- 匯入下拉 -->
                <div class="btn-group">
                    <button id="importDropdownBtn" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown">
                        匯入
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" id="downloadTemplateExcel">下載Excel匯入範例</a></li>
                        <li><a class="dropdown-item" id="downloadTemplateCsv">下載CSV匯入範例</a></li>
                        <li><a class="dropdown-item" id="importStockBatchExcel">匯入 Excel (.xlsx,.xls)</a></li>
                        <li><a class="dropdown-item" id="importStockBatchCSV">匯入 CSV (.csv)</a></li>
                    </ul>
                </div>
                <!-- 隱藏的檔案選擇器 -->
                <input type="file" id="fileInputExcel" accept=".xlsx,.xls" style="display:none" />
                <input type="file" id="fileInputCsv" accept=".csv" style="display:none" />

                <!-- 匯出下拉 -->
                <div class="btn-group">
                    <button id="exportStockBatchBtn" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                        匯出
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" id="exportStockCsv">CSV</a></li>
                        <li><a class="dropdown-item" id="exportStockExcel">Excel</a></li>
                        <li><a class="dropdown-item" id="exportStockPdf">PDF</a></li>
                    </ul>
                </div>
            </div>

            <!-- 標示圖例 -->
            <div class="legend ms-auto">
                <span><span class="dot danger"></span> 危險（低於安全庫存）</span>
                <span><span class="dot low"></span> 須補貨（低於再訂購點）</span>
            </div>
        </div>

        <!-- 第二排：篩選 -->
        <div class="row mb-2">
            <!-- 過期篩選 -->
            <div class="col-12 col-md-4">
                <label for="stockExpireFilter" class="form-label" style="margin-bottom:2px; padding-left:6px;">過期與否篩選</label>
                <select id="stockExpireFilter" class="form-select form-select-sm">
                    <option value="">全部</option>
                    <option value="valid" selected>未過期</option>
                    <option value="expired">已過期</option>
                </select>
            </div>

            <!-- 中間空白 -->
            <div class="d-none d-md-block col-md-4"></div>

            <!-- 日期區間 -->
            <div class="col-12 col-md-4">
                <label class="form-label" style="margin-bottom:2px;padding-left:6px;">篩選建立日期</label>
                <div class="input-group input-group-sm">
                    <input type="date" id="startDate" class="form-control" />
                    <span class="input-group-text bg-white">~</span>
                    <input type="date" id="endDate" class="form-control" />
                </div>
            </div>
        </div>

        <!-- DataTable -->
        <table id="stockBatchTable" class="display table rounded-0 " style="width:100%">
            <thead>
                <tr>
                    <th>#</th> <!-- 序號欄 -->
                    <th>SKU</th>
                    <th>批號</th>
                    <th>品牌</th>
                    <th>商品</th>
                    <th>到期日</th>
                    <th>批次庫存量</th>
                    <th>再訂購點</th>
                    <th>安全庫存</th>
                    @* <th>規格</th> *@
                    <th>操作</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- 異動紀錄 historyTable -->
    <div id="historyTableWrapper" style="display:none;">
        <!-- 第一排：匯出按鈕 -->
        <div class="d-flex align-items-center mb-2">
            <div class="btn-group me-2">
                <button id="exportHistoryBtn" class="btn btn-outline-secondary  dropdown-toggle" data-bs-toggle="dropdown" style="border-color:#a349a4; color:#a349a4;">
                    匯出
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" id="exportHistoryCsv">CSV</a></li>
                    <li><a class="dropdown-item" id="exportHistoryExcel">Excel</a></li>
                    <li><a class="dropdown-item" id="exportHistoryPdf">PDF</a></li>
                </ul>
            </div>
        </div>

        <!-- 第二排：篩選 -->
        <div class="row mb-2">
            <!-- 過期篩選 -->
            <div class="col-12 col-md-4">
                <label for="historyExpireFilter" class="form-label" style="margin-bottom:2px; padding-left:6px;">過期與否篩選</label>
                <select id="historyExpireFilter" class="form-select form-select-sm">
                    <option value="">全部</option>
                    <option value="valid" selected>未過期</option>
                    <option value="expired">已過期</option>
                </select>
            </div>

            <!-- 中間空白 -->
            <div class="d-none d-md-block col-md-4"></div>

            <!-- 日期區間 -->
            <div class="col-12 col-md-4 d-flex align-items-end">
                <div class="me-1" style="flex:1">
                    <label for="historyStartDate" class="form-label" style="margin-bottom:2px;padding-left:6px;">篩選最後異動日期</label>
                    <input type="date" id="historyStartDate" class="form-control form-control-sm" />
                </div>
                <div class="px-1" style="padding-bottom: 4px;">~</div>
                <div class="ms-1" style="flex:1">
                    <label for="historyEndDate" class="form-label" style="margin-bottom:2px;padding-left:6px;">EndDate</label>
                    <input type="date" id="historyEndDate" class="form-control form-control-sm" />
                </div>
            </div>
        </div>

        <!-- DataTable -->
        <table id="historyTable" class="display table" style="width:100%">
            <thead>
                <tr>
                    <th>SKU</th>
                    <th>批號</th>
                    <th>到期日</th>
                    <th>異動類型</th>
                    <th>異動前數量</th>
                    <th>異動數量</th>
                    <th>異動後數量</th>
                    <th>異動時間</th>
                    <th>異動人員</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<!-- 庫存操作 Modal (#stockBatchModal)（模態視窗） -->
<div id="stockBatchModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content bg-white container">
            <!-- Header -->
            <div class="modal-header">
                <h5 id="stockBatchModalTitle" class="modal-title">庫存</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div id="stockBatchModalContent" class="modal-body p-4">
                <!-- AJAX 載入 _StockBatchFormPartial -->
            </div>
        </div>
    </div>
</div>

<!-- 單筆庫存操作 Modal (#stockEditModal)（模態視窗） -->
<div id="stockEditModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content bg-white container">
            <!-- Header -->
            <div class="modal-header">
                <h5 id="stockEditModalTitle" class="modal-title">單筆庫存操作</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div id="stockEditModalContent" class="modal-body p-4">
                <!-- AJAX 載入 _StockBatchEditPartial -->
            </div>
        </div>
    </div>
</div>

<!-- 異動後，浮現的批次異動明細 Modal (#batchMovementModal) -->
<div id="batchMovementModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content bg-white container p-3" style="background-color: #fff; border-radius: 12px; box-shadow: 0 4px 12px #40558c;">
            <div class="card-body">
                <div class="table-responsive">
                    <table id="batchMovementTable" border="1" class="table table-bordered text-center" style="width:100%; margin: 0 auto; border-collapse: separate; border-spacing: 0 4px;table-layout:auto;">
                        <thead>
                            <tr>
                                <th>SKUCode</th>
                                <th>批號</th>
                                <th>變動類型</th>
                                <th>批次原庫存</th>
                                <th>異動數量</th>
                                <th>批次現庫存</th>
                                @* <th>預計庫存</th> *@
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 編輯備註 Modal -->
<div id="stockRemarkModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content bg-white container">
            <!-- Header -->
            <div class="modal-header">
                <h5 class="modal-title" id="stockRemarkModalTitle">修改備註</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body p-4">
                <div class="mb-2">
                    <strong>品牌:</strong> <span id="remarkBrandName"></span><br>
                    <strong>商品:</strong> <span id="remarkProductName"></span><br>
                    <strong>SKU:</strong> <span id="remarkSkuCode"></span><br>
                    <strong>製造日期:</strong> <span id="remarkManufactureDate"></span><br>
                    <strong>現有庫存:</strong> <span id="remarkCurrentQty"></span>
                </div>
                <div class="mb-2">
                    <label for="remarkInput">備註</label>
                    <textarea id="remarkInput" class="form-control" rows="3"></textarea>
                </div>
            </div>

            <!-- Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" id="saveRemarkBtn">儲存備註</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // 初始化庫存操作表單事件
        function initStockBatchForm(selectedBrandId = null, selectedProductId = null, selectedSkuId = null, options = {}) {
            options = options || {};
            var isEdit = options.isEdit || false;

            var brandSelect = $('#BrandSelect');
            var productSelect = $('#ProductSelect');
            var skuSelect = $('#SkuSelect');
            var movementTypeSelect = $('#MovementTypeSelect');
            var changeQtyInput = $('#ChangeQtyInput');
            var changeQtyHelp = $('#ChangeQtyHelp');

            // ---------- 初始化下拉 ----------
            brandSelect.empty().append('<option value="">請選品牌</option>');
            productSelect.empty().append('<option value="">請選商品</option>').prop('disabled', true);
            skuSelect.empty().append('<option value="">請選 SKU</option>').prop('disabled', true);
            movementTypeSelect.empty().append('<option value="">請選異動類型</option>');
            changeQtyInput.val(1).prop('max', 0);
            changeQtyHelp.hide();

            // ---------- 取得品牌列表 ----------
            $.get('/SUP/StockBatches/GetBrands', function(brands) {
                // console.log('回傳brands:', brands);
                brandSelect.empty().append('<option value="">請選品牌</option>');

                brands.forEach(b => {
                    // 判斷供應商是否啟用
                    if(b.isSupplierActive) {
                        brandSelect.append(
                            `<option value="${b.brandId}" ${b.brandId == selectedBrandId ? 'selected' : ''}>
                                ${b.brandName}
                            </option>`
                        );
                    } else {
                        brandSelect.append(
                            `<option value="${b.brandId}" disabled style="color:gray;">
                                ${b.brandName} (其供應商未啟用)
                            </option>`
                        );
                    }
                });
                if(selectedBrandId) brandSelect.trigger('change');
            });

            // ---------- 品牌 change → 載入商品 ----------
            brandSelect.off('change').on('change', function() {
                resetStockInfo();
                var brandId = $(this).val();
                console.log('已選擇品牌Id:', brandId);

                if(!brandId) {
                    productSelect.empty().append('<option value="">請選商品</option>').prop('disabled', true);
                    skuSelect.empty().append('<option value="">請選 SKU</option>').prop('disabled', true);
                    return;
                }
                $.get('/SUP/StockBatches/GetProductsByBrand', { brandId: brandId }, function(products) {
                    // console.log('回傳products:', products);
                    productSelect.empty().append('<option value="">請選商品</option>');
                    products.forEach(p => {
                        productSelect.append(`<option value="${p.productId}" ${p.productId == selectedProductId ? 'selected' : ''}>${p.productName}</option>`);
                    });
                    productSelect.prop('disabled', false);
                    if(selectedProductId) productSelect.trigger('change');
                });
            });

            // ---------- 商品 change → 載入 SKU ----------
            productSelect.off('change').on('change', function() {
                resetStockInfo();
                var productId = $(this).val();
                console.log('已選擇商品Id:', productId);

                skuSelect.empty().append('<option value="">請選 SKU</option>').prop('disabled', true);
                if (!productId) return;

                $.get('/SUP/StockBatches/GetSkusByProduct', { productId: productId }, function(skus) {
                    console.log('回傳skus:', skus);
                    if(!skus || skus.length === 0) {
                        skuSelect.empty().append('<option value="">沒有 SKU</option>');
                        return;
                    }
                    skus.forEach(sku => {
                        skuSelect.append(`<option value="${sku.skuId}" ${sku.skuId == selectedSkuId ? 'selected' : ''}>${sku.skuCode}</option>`);
                    });
                    skuSelect.prop('disabled', false);
                    if(selectedSkuId) setTimeout(() => skuSelect.trigger('change'), 50);
                });
            });

            // ---------- SKU change → 載入 SKU 資訊 ----------
            skuSelect.off('change').on('change', function() {
                var skuId = $(this).val();
                console.log('已選擇skuId:', skuId);

                if(!skuId) return resetStockInfo();

                $.get('/SUP/StockBatches/GetSkuInfo', { skuId: skuId }, function(info) {
                    console.log('回傳info:', info);
                    $('#CurrentQty').text(info.currentStock || 0);
                    $('#MaxStockQty').text(info.maxStockQty || 0);
                    $('#PredictedQty').text(info.expectedStock || 0);
                    $('#ReorderPoint').text(info.reorderPoint || 0);
                    $('#SafetyStockQty').text(info.safetyStockQty || 0);
                    $('#IsAllowBackorderText').text(info.isAllowBackorder ? '允許預購' : '不允許預購');

                    updateStockInfo();
                });
            });

            // ---------- 取得異動類型 ----------
            $.get('/SUP/StockBatches/GetMovementTypes', function(types) {
                movementTypeSelect.empty().append('<option value="">請選異動類型</option>');
                types.forEach(t => movementTypeSelect.append(`<option value="${t.value}">${t.text}</option>`));
                // 加入其他庫存操作
                [{ value: 'Sale', text: '銷售出庫' }, { value: 'Return', text: '退貨入庫' }, { value: 'Expire', text: '到期報廢' }]
                    .forEach(t => movementTypeSelect.append(`<option value="${t.value}">${t.text}</option>`));

                if(isEdit){
                    movementTypeSelect.val('Adjust').prop('disabled', true);
                    $('#AdjustOptions').show();
                } else {
                    movementTypeSelect.prop('disabled', false);
                    $('#AdjustOptions').hide();
                }
                updateStockInfo();
            });

            // ---------- 異動類型 change ----------
            movementTypeSelect.off('change').on('change', function() {
                $('#AdjustOptions').toggle($(this).val() === 'Adjust');
                updateStockInfo();
            });

            // ---------- Adjust radio change ----------
            $(document).off('change', 'input[name="IsAdd"]').on('change', 'input[name="IsAdd"]', updateStockInfo);

            // ---------- 異動數量輸入 ----------
            changeQtyInput.off('input').on('input', function() {
                let val = parseInt($(this).val()) || 1;
                const max = parseInt($(this).attr('max')) || Number.MAX_SAFE_INTEGER;
                if(val < 1) val = 1;
                if(val > max) val = max;
                $(this).val(val);
                updateStockInfo();
            });

            // ---------- 初始化日期 ----------
            $('#ManufactureDate').val(new Date().toISOString().split('T')[0]);

            // ---------- 工具函式 ----------
            function resetStockInfo() {
                $('#CurrentQty, #PredictedQty, #MaxStockQty, #ReorderPoint, #SafetyStockQty, #IsAllowBackorderText').text('0');
                changeQtyInput.val(1).prop('max', 0);
            }

            function calcMaxAllowed(movementType, isAdd, currentStock, maxStock) {
                if(movementType !== 'Adjust' && (movementType !== 'Sale' && movementType !== 'Expire')) isAdd = true;
                if(isAdd){
                    var allowed = maxStock - currentStock; if(allowed<0) allowed=0; return allowed;
                } else {
                    var allowed = currentStock; if(allowed<0) allowed=0; return allowed;
                }
            }

            function updateStockInfo() {
                var changeQty = parseInt(changeQtyInput.val()) || 1;
                var currentStock = parseInt($('#CurrentQty').text()) || 0;
                var maxStock = parseInt($('#MaxStockQty').text()) || 0;
                var movementType = movementTypeSelect.val();
                var isAdd = true;

                if(movementType === 'Adjust'){
                    isAdd = $('input[name="IsAdd"]:checked').val() === 'true';
                } else if(movementType === 'Sale' || movementType === 'Expire'){
                    isAdd = false;
                } else {
                    isAdd = true;
                }

                // 計算最大可異動數量
                var maxAllowed = calcMaxAllowed(movementType, isAdd, currentStock, maxStock);
                changeQtyInput.prop('max', maxAllowed);

                // 當庫存已滿，且是增加動作，預設異動數量為 0
                if(isAdd && maxAllowed === 0){
                    changeQty = 0;
                } else {
                    if(changeQty > maxAllowed) changeQty = maxAllowed;
                    if(changeQty < 1) changeQty = 1;
                }
                changeQtyInput.val(changeQty);

                var predictedStock = isAdd ? currentStock + changeQty : currentStock - changeQty;
                if(!isAdd && predictedStock < 0) predictedStock = 0;
                $('#PredictedQty').text(predictedStock);

                changeQtyHelp.show();
                changeQtyHelp.text('異動數量上限: '+maxAllowed+(isAdd?'（可增加）':'（可減少）'));
            }
        }

        // 初始化庫存 DataTable 與按鈕事件
        $(document).ready(function () {

            // ======= 初始化所有 SKU 批號 =======
            $('#btnInitBatches').click(function() {
                if(!confirm('確定要初始化所有 SKU 批號嗎？')) return;

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("InitializeBatches", "StockBatches")',
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    success: function(res) {
                        if(res.success){
                            $('#initResult').text(res.message).css('color','green');
                        } else {
                            $('#initResult').text(res.message).css('color','red');
                        }
                    },
                    error: function(err) {
                        $('#initResult').text('伺服器錯誤').css('color','red');
                    }
                });
            });

            // ======= 從 sessionStorage 拿到初始品牌名稱 =======
            var initialBrandName = sessionStorage.getItem('selectedBrandName') || '';

            // 初始化完就清掉，避免刷新又填入
            sessionStorage.removeItem('selectedBrandName');

            // ======= 定義 selectedSupplierId =======
            var selectedSupplierId = '';

            // ======= 初始化 1. 庫存紀錄 DataTable =======
            var stockBatchTable = $('#stockBatchTable').DataTable({
                serverSide: true,   // 用後端搜排分業
                processing: true,   // 顯示「正在處理中」的訊息（loading）
                ajax: {
                    url: '/SUP/StockBatches/IndexJson',
                    type: 'POST',
                    data: function(d) {
                        d.supplierId = selectedSupplierId; // 傳給 IndexJson
                        d.expireFilter = $('#stockExpireFilter').val(); // 傳到期日篩選值
                        d.startDate = $('#startDate').val();
                        d.endDate = $('#endDate').val();
                    },
                    dataSrc: function(json) {
                        //console.log(json);      // 印出整個 JSON
                        //console.log(json.data); // 印出每筆 row
                        return json.data;
                    },
                    error: function(xhr, error, thrown) {
                        console.log(xhr.responseText); // 印出後端錯誤訊息
                        alert("資料載入失敗，請檢查後端或 console");
                    }
                },
                columns: [
                    {
                        data: 'sortDate',
                        title: '#',
                        className: 'text-center',
                        orderable: true,           // 可點擊排序
                        render: function(data, type, row, meta){
                            return meta.row + 1 + meta.settings._iDisplayStart; // 顯示序號
                        }
                    },
                    {
                        data: 'skuCode',
                        title: 'SkuCode',
                        className: 'text-center',
                        render: function(data, type, row) {
                            //console.log(data);
                            //console.log(row.skuId);
                            if (!data) return '';
                            return `<span data-bs-toggle="tooltip"
                                            data-bs-placement="top"
                                            title="SkuId: ${row.skuId}">
                                        ${data}
                                    </span>`;
                        }
                    },
                    { data: 'batchNumber', title: '批號', className: 'text-center'},
                    {
                        data: 'brandName',
                        title: '品牌', 
                        className: 'text-center',
                        render: function(data) {
                            return `
                                ${data} <button class="btn btn-sm brand-btn" data-id="${data}" title="前往品牌頁" data-bs-toggle="tooltip">
                                    <i class="fa-regular fa-copyright" style="color: #96b8f3;"></i>
                                </button>
                            `;
                        }
                    },
                    { data: 'productName', title: '商品名稱', className: 'text-center text-wrap', width: "200px"},
                    {
                        data: 'expireDate',
                        title: '到期日',
                        className: 'text-center',
                        render: function(data) {
                            if (!data) return '無';
                            let date = new Date(data);
                            let today = new Date();
                            let formatted = date.toLocaleDateString('zh-TW');
                            if (date < today.setHours(0,0,0,0)){
                                return `<span class="text-danger">${formatted} (已過期)</span>`;
                            }
                            return formatted;
                        }
                    },
                    {
                    data: 'qty',
                    title: '批次庫存量',
                    className: 'text-center',
                    render: function(data, type, row){
                        let batchQty = parseInt(data);
                        let totalStock = parseInt(row.totalStock);   // 總庫存
                        let safety = parseInt(row.safetyStockQty);   // 安全庫存
                        let reorder = parseInt(row.reorderPoint);    // 再訂購點

                        if(isNaN(totalStock)) totalStock = 0;
                        if(isNaN(safety)) safety = 0;
                        if(isNaN(reorder)) reorder = 0;

                        let statusClass = 'stock-normal';
                        let icon = '';

                        if(totalStock < safety){
                            statusClass = 'stock-danger';
                            icon = '<i class="fa-solid fa-triangle-exclamation" style="color: #e66774;"></i>';
                        } else if(totalStock >= safety && totalStock < reorder){
                            statusClass = 'stock-low';
                            icon = '<i class="fa-solid fa-circle-exclamation" style="color: #f9d66f;"></i>';
                        }

                        return `<span class="${statusClass}"
                                        data-bs-toggle="tooltip"
                                        data-bs-html="true"
                                        title="批次庫存: ${batchQty}<br>SKU 總庫存: ${totalStock}">
                                        ${icon}${batchQty}
                                </span>`;
                    }
                },


                    { data: 'reorderPoint', title: '再訂購點' , className: 'text-center'},
                    { data: 'safetyStockQty', title: '安全庫存' , className: 'text-center'},
                    // {
                    //     data: 'specifications',
                    //     className: 'text-center',
                    //     title: '規格',
                    //     render: function(data) {
                    //         console.log(data);  印出確認
                    //         if(!data) return '';
                    //         return data.map(s => s.groupName + ':' + s.optionName).join(' / ');
                    //     }
                    // },
                    {
                        data: 'stockBatchId',
                        title: '操作',
                        className: 'text-center',
                        orderable: false,
                        render: function(data, type, row) {
                            // console.log(row.brandName);
                            return `
                                <button class="btn btn-sm edit-stock-btn" data-id="${data}" data-bs-toggle="tooltip" title="該筆批次異動">
                                    <i class="fa-solid fa-right-from-bracket" style="color: #977ee2;"></i>
                                </button>
                                <button class="btn btn-sm stock-history-btn" data-brandname="${row.brandName}" data-bs-toggle="tooltip" title="品牌異動紀錄">
                                    <i class="fa-solid fa-clock-rotate-left" style="color: #1c7ed6;"></i>
                                </button>
                            `;
                        }
                    }
                ],
                scrollY: "500px",
                scrollCollapse: true,
                colReorder: true,
                order: [[0, 'desc']], // 預設依序號/最後異動時間排序
                columnDefs: [
                    { targets: '_all', type: 'string' }
                ],
                language: {
                    url: '//cdn.datatables.net/plug-ins/2.3.3/i18n/zh-HANT.json',
                    processing: '<i class="fa-solid fa-dog fa-bounce fa-3x"></i>'
                },
                initComplete: function(settings, json) {
                    // ===== 自動填入搜尋品牌名稱 =====
                    if (initialBrandName) {
                        var searchInput = $('#dt-search-0');
                        searchInput.val(initialBrandName).trigger('input');
                        stockBatchTable.search(initialBrandName).draw();

                        Swal.fire({
                            icon: 'info',
                            title: '已篩選',
                            text: `目前顯示供應商 "${initialBrandName}" 的品牌庫存`,
                            timer: 2000,
                            showConfirmButton: false
                        });
                    }
                    // 初始化 tooltip
                    $('[data-bs-toggle="tooltip"]').each(function() {
                        new bootstrap.Tooltip(this);
                    });
                }
            });

            // ======= 初始化 2. 全站異動紀錄 DataTable =======
            var historyTable = $('#historyTable').DataTable({
                serverSide: true,   // 用後端搜排分業
                processing: true,   // 顯示「正在處理中」的訊息（loading）
                ajax: {
                    url:'/SUP/StockBatches/GetAllStockHistory',
                    type: 'POST',
                    data: function(d) {
                        d.supplierId = selectedSupplierId; // 傳給 IndexJson
                        d.expireFilter = $('#historyExpireFilter').val(); // 傳到期日篩選值
                        d.startDate = $('#historyStartDate').val();
                        d.endDate = $('#historyEndDate').val();
                    },
                    dataSrc: function(json) {
                        //console.log(json);      // 印出整個 JSON
                        //console.log(json.data); // 印出每筆 row
                        return json.data;
                    },
                    error: function(xhr, error, thrown) {
                        console.log(xhr.responseText); // 印出後端錯誤訊息
                        alert("資料載入失敗，請檢查後端或 console");
                    }
                },
                columns: [
                    { data: 'skuCode', title: 'SKU', className: 'text-center'},
                    { data: 'batchNumber', title: '批號', className: 'text-center'},
                    {
                        data: 'expireDate',
                        title: '到期日',
                        className: 'text-center',
                        render: function(d) {
                            if (!d) return '無';
                            let date = new Date(d);
                            let today = new Date();
                            let formatted = date.toLocaleDateString('zh-TW');

                            if (date < new Date(today.setHours(0,0,0,0))) {
                                return `<span class="text-danger">${formatted} (已過期)</span>`;
                            }
                            return formatted;
                        }
                    },
                    {
                        data: 'changeType',
                        title: '異動類型' ,
                        className: 'text-center',
                        render: function(data, type, row) {
                            return getMovementTypeText(data);
                        }
                    },
                    { data: 'beforeQty', title: '異動前數量', className: 'text-center'},
                    { data: 'changeQty', title: '異動數量' , className: 'text-center'},
                    { data: 'afterQty', title: '異動後數量', className: 'text-center'},
                    {
                        data: 'revisedDate',
                        title: '異動時間',
                        className: 'text-center',
                        render: d => d ? new Date(d).toLocaleString() : ''
                    },
                    { data: 'reviser', title: '異動人員' , className: 'text-center'},
                    {
                        data: 'stockBatchId',
                        title: '更改備註',
                        className: 'text-center',
                        orderable: false,
                        render: function(data, type, row) {
                            return `
                                <button class="btn btn-sm stock-text-btn"
                                        data-batchid="${row.stockBatchId}"
                                        data-brandname="${row.brandName}">
                                    <i class="fa-solid fa-pen-to-square" style="color: #9073e8;"></i>
                                </button>
                            `;
                        }
                    }
                ],
                scrollY: "500px",
                scrollCollapse: true,
                colReorder: true,
                columnDefs: [
                    { targets: '_all', type: 'string' }
                ],
                language: {
                    url: '//cdn.datatables.net/plug-ins/2.3.3/i18n/zh-HANT.json',
                    processing: '<i class="fa-solid fa-dog fa-bounce fa-3x"></i>'
                },
                order: [[7, 'desc']], // 預設依異動時間新到舊
            });

            // 下拉選單切換事件
            $('#startDate, #endDate, #stockExpireFilter').on('change', () => stockBatchTable.ajax.reload());
            $('#historyStartDate, #historyEndDate, #historyExpireFilter').on('change', () => historyTable.ajax.reload());

            // 點擊按鈕切換 datatable
            $('#btnToggleStock').on('click', function () {
                var btn = $(this);
                var arrow = btn.find('.arrow i'); // 取到 <i class="...">

                if ($('#stockTableWrapper').is(':visible')) {
                    // 切換到異動紀錄
                    // $('#stockTableWrapper, #tableTitle').fadeOut(200, function () {
                    //     $('#tableTitle').text('全站異動紀錄').fadeIn(200);
                    //     $('#historyTableWrapper').fadeIn(200);
                    // });
                    $('#stockTableWrapper').hide();
                    $('#historyTableWrapper').show();
                    $('#tableTitle').text('全站異動紀錄');

                    btn.html('<span class="arrow"><i class="fa-solid fa-arrow-left"></i></span> 顯示庫存紀錄');
                    historyTable.ajax.reload();
                } else {
                    // 切換回庫存紀錄
                    // $('#historyTableWrapper, #tableTitle').fadeOut(200, function () {
                    //     $('#tableTitle').text('庫存紀錄').fadeIn(200);
                    //     $('#stockTableWrapper').fadeIn(200);
                    // });

                    $('#historyTableWrapper').hide();
                    $('#stockTableWrapper').show();
                    $('#tableTitle').text('庫存紀錄');

                    btn.html('<span class="arrow"><i class="fa-solid fa-arrow-right"></i></span> 顯示異動紀錄');
                    stockBatchTable.ajax.reload();
                }
            });

            // 每次 redraw 都重新初始化 tooltip
            stockBatchTable.on('draw', function() {
                $('[data-bs-toggle="tooltip"]').each(function() {
                    new bootstrap.Tooltip(this);
                });
            });

            // ===== 搜尋欄清空時重置 =====
            $('#dt-search-0').on('input', function() {
                if ($(this).val() === '') {
                    stockBatchTable.search('').draw();
                }
            });
            $('#dt-search-1').on('input', function() {
                if ($(this).val() === '') {
                    historyTable.search('').draw();
                }
            });

            // ===== 新增庫存按鈕 =====
            $('#createStockBatchBtn').on('click', function () {
                $.get('/SUP/StockBatches/Create', function(html){
                    $('#stockBatchModalContent').html(html);
                    $('#stockBatchModalTitle').text("新增庫存");
                    $('#stockBatchModal').modal('show');

                    // 初始化表單：允許選擇 SKU、手動調整 (+/-) 及數量、備註
                    if(window.initStockBatchForm) window.initStockBatchForm();
                });
            });

            // ===== 編輯單筆庫存異動 =====
            $('#stockBatchTable').on('click', '.edit-stock-btn', function() {
                var id = $(this).data('id');

                // 取得該筆異動資料
                $.get(`/SUP/StockBatches/Edit/${id}`, function(html) {
                    // 將表單內容放入 modal
                    $('#stockEditModalContent').html(html);
                    $('#stockEditModalTitle').text("單筆庫存異動");
                    $('#stockEditModal').modal('show');

                    var $modal = $('#stockEditModal');

                    // 固定異動類型 Adjust
                    $modal.find('#MovementTypeSelect').val('Adjust').prop('disabled', true);
                    $modal.find('.stock-edit-adjustOptions').show();

                    var currentStock = parseInt($modal.find('.stock-edit-currentQty').val()) || 0;
                    var maxStock = parseInt($modal.find('.stock-edit-changeQty').data('max')) || 0;

                    // ===== 計算上限 & 更新預計庫存 =====
                    function refreshQtyLimits() {
                        var $checkedRadio = $modal.find('.stock-edit-isAdd:checked');
                        var isAdd = $checkedRadio.length > 0 ? $checkedRadio.val() === '1' : true;

                        var changeInput = $modal.find('.stock-edit-changeQty');
                        var curVal = parseInt(changeInput.val()) || 0;

                        var maxAllowed = isAdd ? (maxStock - currentStock) : currentStock;
                        if (maxAllowed < 0) maxAllowed = 0;

                        if (curVal > maxAllowed) curVal = maxAllowed;
                        if (curVal < 0) curVal = 0;
                        changeInput.val(curVal);
                        changeInput.attr('max', maxAllowed);

                        var predicted = isAdd ? currentStock + curVal : currentStock - curVal;
                        if (predicted < 0) predicted = 0;

                        $modal.find('.stock-edit-maxAllowed').text(maxAllowed);
                        $modal.find('.stock-edit-predictedQty').text(predicted);
                    }

                    refreshQtyLimits();

                    $modal.find('.stock-edit-isAdd').off('change').on('change', refreshQtyLimits);
                    $modal.find('.stock-edit-changeQty').off('input').on('input', refreshQtyLimits);

                    $modal.find('.stock-edit-saveBtn').off('click').on('click', function() {
                        var changeInput = $modal.find('.stock-edit-changeQty');
                        var curVal = parseInt(changeInput.val()) || 0;

                        var $checkedRadio = $modal.find('.stock-edit-isAdd:checked');
                        var isAdd = $checkedRadio.length > 0 ? $checkedRadio.val() === '1' : true; // 一致用 '1' 表增加

                        var formData = {
                            ChangeQty: curVal,
                            IsAdd: isAdd, // 確保布林
                            Remark: $modal.find('textarea[name="Remark"]').val() || ''
                        };

                        $.post(`/SUP/StockBatches/Update/${id}`, formData, function(res) {
                            if (res.success) {
                                $modal.modal('hide');
                                stockBatchTable.ajax.reload(null, true);
                            } else {
                                alert(res.message);
                            }
                        });
                    });
                });
            });

            // ===== 點擊品牌異動紀錄按鈕 =====
            $('#stockBatchTable').on('click', '.stock-history-btn', function()
            {
                console.log('clicked button:', this);
                // 取得該列 brandName
                var brandname = $(this).data('brandname');
                console.log('brandName from button data:', brandname);

                if (!brandname) return console.warn('brandname is undefined!');

                // 切換顯示 table
                $('#stockTableWrapper').hide();
                $('#historyTableWrapper').show();

                console.log('historyTable before search:', historyTable);

                // DataTable 搜尋並刷新
                historyTable.search(brandname).draw();

                // 將搜尋欄文字填入
                $('#historyTable_filter input').val(brandname);

                // 提示訊息
                Swal.fire({
                    icon: 'info',
                    title: '已篩選',
                    text: `目前顯示品牌 "${brandname}" 的異動紀錄`,
                    timer: 3000,
                    showConfirmButton: false
                });
            });

            // ===== 點擊修改備註按鈕 =====
            $('#historyTable').on('click', '.stock-text-btn', function()
            {
                console.log('[Remark] button clicked');

                var batchId = $(this).data('batchid');
                console.log('[Remark] batchId:', batchId);

                // 用 GET 取得 JSON
                $.get(`/SUP/StockBatches/Remark/${batchId}`, function(res) {
                    if (!res.success) {
                        alert(res.message);
                        return;
                    }

                    var data = res.data;
                    console.log('[Remark] data:', data);

                    $('#remarkBrandName').text(data.brandName || '');
                    $('#remarkProductName').text(data.productName || '');
                    $('#remarkSkuCode').text(data.skuCode || '');
                    $('#remarkManufactureDate').text(data.manufactureDate ? new Date(data.manufactureDate).toLocaleDateString() : '');
                    $('#remarkCurrentQty').text(data.currentQty != null ? data.currentQty : 0);
                    $('#remarkInput').val(data.remark || '');

                    $('#stockRemarkModal').modal('show');
                    console.log('[Remark] modal shown');

                    // 儲存備註
                    $('#saveRemarkBtn').off('click').on('click', function() {
                        console.log('[Remark] save button clicked');
                        var newRemark = $('#remarkInput').val();

                        $.post(`/SUP/StockBatches/UpdateHistoryRemark`, {
                            StockHistoryId: data.stockHistoryId,  // 傳最後一次異動 ID
                            // StockBatchId: batchId,
                            Remark: newRemark
                        }, function(res) {
                            console.log('[Remark] POST result:', res);
                            if (res.success) {
                                $('#stockRemarkModal').modal('hide');
                                stockBatchTable.ajax.reload(null, false); // 刷新表格

                                // SweetAlert 提示
                                Swal.fire({
                                    icon: 'success',
                                    html: `已更改異動紀錄ID: ${res.stockHistoryId}<br>批號: ${data.batchNumber} 的備註`,
                                    timer: 1500,
                                    showConfirmButton: false
                                });

                            } else {
                                alert(res.message);
                            }
                        });
                    });
                });
            });

            // ===== 點擊 submit =====
            $('#stockBatchModalContent')
            .off('submit', '#stockBatchForm')
            .on('submit', '#stockBatchForm', function (e) {
                e.preventDefault();
                var form = $(this);
                var formData = new FormData(form[0]);

                // 無論異動類型，都送 MovementType
                var movementType = $('#MovementTypeSelect').val();
                var isAdd;

                if (movementType === 'Purchase' || movementType === 'Return') {
                    isAdd = true;
                } else if (movementType === 'Sale' || movementType === 'Expire') {
                    isAdd = false;
                } else {
                    // Adjust 根據 radio 選擇
                    var $checkedRadio = form.find('input[name="IsAdd"]:checked');
                    if ($checkedRadio.length > 0) {
                        isAdd = $checkedRadio.val() === 'true';
                    } else {
                        isAdd = true; // 預設增加
                    }
                }

                formData.set('MovementType', movementType || 'Adjust');
                formData.set('IsAdd', isAdd);
                console.log("異動類型:", movementType, "加減選擇:", isAdd ? "增加" : "減少");

                // 根據異動類型動態決定 URL
                let url;
                switch (movementType) {
                    case 'Sale':
                        url = '/SUP/StockBatches/SaleStock';
                        break;
                    case 'Return':
                        url = '/SUP/StockBatches/ReturnStock';
                        break;
                    default:
                        url = form.attr('action'); // Adjust 或其他共用
                }

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]', form).val()
                    },
                    success: function (res) {
                        console.log("後端回傳完整資料:", res);

                        if (res.success) {
                            $('#stockBatchModal').modal('hide');
                            Swal.fire({ position: 'center', icon: 'success', title: res.message || '操作成功', showConfirmButton: false, timer: 1200 });
                            stockBatchTable.ajax.reload(null, true);
                            if (res.batchMovements?.length > 0) showbatchMovements(res.batchMovements);
                        } else {
                            Swal.fire('操作失敗', res.message || '資料格式錯誤', 'error');
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire('操作失敗', '伺服器發生錯誤', 'error');
                        console.error("AJAX 發生錯誤:", status, error);
                    }
                });
            });

            const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD

            // 篩選，End預設今天
            $('#endDate, #historyEndDate').val(today);

            // 起始日期：最大值不可超過今天
            $('#startDate,#historyStartDate').attr('max', today);

            // 結束日期：最小值等於起始日期，最大值不可超過今天
            $('#endDate, #historyEndDate').attr('max', today);
            $('#endDate, #historyEndDate').attr('min', $('#startDate,#historyStartDate').val());

            // 當 startDate 改變時，動態調整 endDate 的最小值
            $('#startDate').on('change', function () {
                const startVal = $(this).val();
                $('#endDate, #historyEndDate').attr('min', startVal);

                // 如果 endDate 小於新的 startDate，自動調整
                if ($('#endDate, #historyEndDate').val() < startVal) {
                    $('#endDate, #historyEndDate').val(startVal);
                }
            });

            // 當 endDate 改變時，若超過今天，自動修正
            $('#endDate, #historyEndDate').on('change', function () {
                const endVal = $(this).val();
                if (endVal > today) {
                    $(this).val(today);
                }
            });
        });

        // 異動後浮現批次明細表格
        function showbatchMovements(batchMovements) {
            const tbody = $('#batchMovementTable tbody');
            tbody.empty();

            batchMovements.forEach(m => {
                // 正確計算增減符號
                let changeDisplay = m.isAdd ? `+${m.changeQty}` : `-${m.changeQty}`;

                // 判斷異動前數量
                let beforeQtyDisplay;
                if (m.isAdd && m.currentQty === 0) {
                    beforeQtyDisplay = "新建批號";
                } else {
                    beforeQtyDisplay = m.currentQty;
                }

                // 計算異動後庫存
                const afterQtyDisplay = m.isAdd ? m.currentQty + m.changeQty : m.currentQty - m.changeQty;

                const row = `<tr>
                    <td>${m.skuCode}</td>
                    <td>${m.batchNumber || '-'}</td>
                    <td>${getMovementTypeText(m.movementType)}</td>
                    <td>${beforeQtyDisplay}</td>
                    <td>${changeDisplay}</td>
                    <td>${afterQtyDisplay}</td>
                </tr>`;
                tbody.append(row);
            });

            $('#batchMovementModal').modal('show');
        }

        function getMovementTypeText(type) {
            switch(type) {
                case 'Adjust': return '手動調整';
                case 'Purchase': return '採購入庫';
                case 'Sale': return '出貨';
                case 'Return': return '退貨';
                case 'Expire': return '報廢';
                default: return type;
            }
        }

        // 計算上限
        function calcMaxAllowed(movementType, isAdd, currentStock, maxStock) {
            switch (movementType) {
                case 'Adjust':
                    // 調整型，使用 isAdd 判斷
                    return isAdd ? Math.max(maxStock - currentStock, 0) : Math.max(currentStock, 0);
                case 'Sale':
                case 'Expire':
                    // 出庫 / 報廢 → 最大不可超過現有庫存
                    return Math.max(currentStock, 0);
                case 'Return':
                case 'Purchase':
                    // 入庫 → 最大不可超過最大庫存
                    return Math.max(maxStock - currentStock, 0);
                default:
                    // 預設當作入庫
                    return Math.max(maxStock - currentStock, 0);
            }
        }

        // 點擊下載匯入範例
        $('#downloadTemplateExcel').click(() => window.location = '/SUP/StockBatches/DownloadStockBatchTemplateExcel');
        $('#downloadTemplateCsv').click(() => window.location = '/SUP/StockBatches/DownloadStockBatchTemplateCsv');

        // 點擊匯入 → 觸發選檔
        $('#importStockBatchExcel').click(function(e) {
            e.preventDefault(); // 阻止下拉自動收合衝突
            $('#fileInputExcel').click();
        });
        $('#importStockBatchCSV').click(function(e) {
            e.preventDefault(); // 阻止下拉自動收合衝突
            $('#fileInputCsv').click();
        });

        // Excel 選完檔案後上傳
        $('#fileInputExcel').change(async function () {
            const file = this.files[0];
            if (!file) return alert('請選擇檔案');

            const formData = new FormData();
            formData.append('file', file);

            try {
                const res = await fetch('/SUP/StockBatches/ImportStockBatchExcel', {
                    method: 'POST',
                    body: formData
                });
                const data = await res.json();
                if (data.success) {
                    alert('匯入完成！\n' + data.messages.join('\n'));
                    location.reload();
                } else {
                    alert('匯入失敗：' + (data.message || '未知錯誤'));
                }
            } catch (err) {
                alert('上傳發生錯誤，請再試一次\n' + err);
            }

            // 清空 input 避免重複選擇同一檔案不觸發 change
            this.value = '';
        });

        // Csv 選擇檔案後上傳
        $('#fileInputCsv').change(async function () {
            const file = this.files[0];
            if (!file) return alert('請選擇檔案');

            const formData = new FormData();
            formData.append('file', file);

            try {
                const res = await fetch('/SUP/StockBatches/ImportStockBatchCsv', {
                    method: 'POST',
                    body: formData
                });
                const data = await res.json();
                if (data.success) {
                    alert('匯入完成！\n' + data.messages.join('\n'));
                    location.reload();
                } else {
                    alert('匯入失敗：' + (data.message || '未知錯誤'));
                }
            } catch (err) {
                alert('上傳發生錯誤，請再試一次\n' + err);
            }

            this.value = '';
        });


        // stockBatchTable 匯出目前篩選結果
        function exportStockFiltered(type) {
            const table = $('#stockBatchTable').DataTable();

            const params = new URLSearchParams({
                type: type,
                searchValue: table.search(),
                startDate: $('#startDate').val(),
                endDate: $('#endDate').val(),
                expireFilter: $('#stockExpireFilter').val()
            });

            const url = `/SUP/StockBatches/ExportStockFiltered?${params.toString()}`;
            window.open(url, '_blank'); // 新分頁下載檔案
        }

        // 綁定匯出按鈕
        $('#exportStockCsv').on('click', () => exportStockFiltered('csv'));
        $('#exportStockExcel').on('click', () => exportStockFiltered('excel'));
        $('#exportStockPdf').on('click', () => exportStockFiltered('pdf'));

        // historyTable 匯出目前篩選結果
        function exportHistoryFiltered(type) {
            var table = $('#historyTable').DataTable();

            // DataTables 全局搜尋
            var searchValue = table.search();

            // 篩選條件
            var startDate = $('#historyStartDate').val();
            var endDate = $('#historyEndDate').val();
            var expireFilter = $('#historyExpireFilter').val();

            // 組 URL
            let url = `/SUP/StockBatches/ExportHistoryFiltered?type=${type}`;
            if (searchValue) url += `&searchValue=${encodeURIComponent(searchValue)}`;
            if (startDate) url += `&startDate=${startDate}`;
            if (endDate) url += `&endDate=${endDate}`;
            if (expireFilter) url += `&expireFilter=${expireFilter}`;

            window.location = url;
        }

        // 綁定匯出按鈕
        $('#exportHistoryCsv').click(() => exportHistoryFiltered('csv'));
        $('#exportHistoryExcel').click(() => exportHistoryFiltered('excel'));
        $('#exportHistoryPdf').click(() => exportHistoryFiltered('pdf'));


        // ======= 點品牌欄位按鈕跳轉品牌頁 =======
        $('#stockBatchTable').on('click', '.brand-btn', function () {
            var $thisBtn = $(this);
            var brandName = $(this).data('id'); // 這裡存放 brandName
            console.log('點擊品牌按鈕，brandName:', brandName);

            if (!brandName) {
                console.error('❌ brandName 為空，無法跳轉');
                return;
            }

            Swal.fire({
                title: `確認要前往品牌頁面：<br>"${brandName}"？`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '前往',
                cancelButtonText: '取消',
                didClose: () => {
                    // Swal 關閉後才清除焦點（更穩定）
                    $thisBtn.blur();
                    document.activeElement.blur();
                    document.body.focus();
                    // 甚至強制 focus 到某個表格外元素
                    $('#someSafeElement').focus(); // 可設一個隱藏 input 或主容器
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // 存入 sessionStorage
                    sessionStorage.setItem('selectedBrandName', brandName);
                    console.log('✅ 存入 sessionStorage: selectedBrandName =', sessionStorage.getItem('selectedBrandName'));

                    // 跳轉到供應商頁面
                    window.location.href = '/SUP/Brands/Index';
                }
            });

        });

    </script>
}
