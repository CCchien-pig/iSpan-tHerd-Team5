@model tHerdBackend.CNT.Rcl.Areas.CNT.ViewModels.TinyMceInitVM
@Html.AntiForgeryToken()
<script src="https://cdn.tiny.cloud/1/r5667x13d0hhddtzkecsjtxy7i4xdtrx1p7nyscygxet0ht0/tinymce/8/tinymce.min.js"
        referrerpolicy="origin" crossorigin="anonymous"></script>
<script>
      // 取得 Anti-forgery Token（若你的表單有 @Html.AntiForgeryToken()）
    const antiForgeryToken =
    document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    // 用 Razor 產生正確的區域路徑
    const uploadImageUrl = '@Url.Action("Image", "Upload", new { area = "CNT" })';
    const uploadMediaUrl = '@Url.Action("Media", "Upload", new { area = "CNT" })';

            const placeholders = [
      "「用文字征服世界。」",
      "「寫吧，這裡是你的戰場！」",
      "「別怕，打錯字不會被扣薪水。」",
      "「字越多，力量越大。」",
      "「來，發表你的偉大言論。」",
      "「這裡可以容納你的一切靈感，除了你昨晚的爛笑話。」",
      "「不管是生旦淨末丑，跑龍套也能讓你激昂，寧願捨一頓飯也聽你唱。」",
      "「這是一首簡單的小情歌，唱著我們心頭的白鴿。」",
      "「想說好多話，可不知從何說起？」"
    ];

    const randomPlaceholder = placeholders[Math.floor(Math.random() * placeholders.length)];
    const randomPlaceholder1 = placeholders[Math.floor(Math.random() * placeholders.length)];

    // ✅ 組合成多行字串（用換行 \n 或 template literal）
    const combinedPlaceholder = `兩段一樣的時候才能開始打字＝＞${randomPlaceholder}\n${randomPlaceholder1}`;

        tinymce.init({
           selector: '#editor',
            height: 600,              // ✅ 固定高度
            placeholder: combinedPlaceholder,   // ✅ 隨機 placeholder
            content_style: `
            body.mce-content-body[data-mce-placeholder]:empty::before {
            font-size: 20px !important;
            font-style: italic;
            color: #e63946;
            white-space: pre-line !important; /* ✅ 保留換行 */
            display: block;                  /* ✅ 讓 \n 真的換行 */
            }`,
            menubar: true,
            statusbar: true,          // ✅ 保留底部狀態列
            resize: true,            // ❌ 禁止使用者手動拖曳高度

          // 重要：啟用圖片/影片/emoji 相關外掛
          plugins: 'image media emoticons link lists table code wordcount preview',

          // 工具列加入：圖片、媒體、Emoji
          toolbar: 'undo redo | bold italic underline | link image media emoticons | bullist numlist | table | code | wordcount | preview',
          // 讓「插入媒體」對話框支援貼 YouTube/Vimeo 連結（media 外掛會處理 <iframe>）
          media_live_embeds: true,

          // 限制可挑選的檔案類型（選配）
          file_picker_types: 'image media',

          // ✅ 圖片上傳：兩種做法擇一
          // A. 最簡：靠 images_upload_url（TinyMCE 自動用 multipart/form-data 上傳「file」欄位）
          // images_upload_url: '/upload/image',

          // B. (可選) 自訂 handler：自己用 fetch 加上 CSRF 標頭與進度回報
            images_upload_handler: async (blobInfo, progress) => {
              const form = new FormData();
              form.append('file', blobInfo.blob(), blobInfo.filename());

              const resp = await fetch(uploadImageUrl, {
                method: 'POST',
                body: form,
                headers: antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {}
              });

              const text = await resp.text();
              let json;
              try {
                  json = JSON.parse(text);
              } catch {
                  console.error("❌ 回傳不是 JSON:", text);
                  throw new Error("Upload API did not return JSON");
              }

              if (!resp.ok || !json?.location) {
                  throw new Error(json?.message || "Image upload failed");
              }
              return json.location;
            },

        // ✅ 影片上傳：用 file_picker_callback 把檔案丟到 /upload/media，回傳 URL 後插入 <video> 或 <iframe>
        // TinyMCE file_picker_callback
        file_picker_callback: async (callback, value, meta) => {
          if (meta.filetype !== 'image' && meta.filetype !== 'media') return;

          const input = document.createElement('input');
          input.type = 'file';
          input.accept = meta.filetype === 'image'
            ? 'image/*'
            : 'video/mp4,video/webm,video/ogg'; // 你支援的影片格式

          input.onchange = async () => {
            const file = input.files[0];
            if (!file) return;

            const form = new FormData();
            form.append('file', file);

            const url = meta.filetype === 'image' ? uploadImageUrl : uploadMediaUrl;

            try {
              const resp = await fetch(url, {
                method: 'POST',
                body: form,
                headers: antiForgeryToken
                  ? { 'RequestVerificationToken': antiForgeryToken }
                  : {}
              });

              if (!resp.ok) {
                alert('伺服器錯誤，狀態碼：' + resp.status);
                return;
              }

              const json = await resp.json();
              if (!json?.location) {
                alert(json?.message || 'Upload failed: 沒有回傳 location');
                return;
              }

              // ✅ 根據檔案類型回傳
              if (meta.filetype === 'image') {
                callback(json.location, { title: file.name });
              } else if (meta.filetype === 'media') {
                // TinyMCE 插入 <video><source src="..."></video>
                callback(json.location, {
                  title: file.name,
                  source2: json.location
                });
              }
            } catch (err) {
              console.error('Upload failed', err);
              alert('上傳失敗，可能是伺服器沒有回傳 JSON');
            }
          };

          input.click();
        },

          // Emoji（表情符號）
          // 只要有 emoticons 外掛與工具列按鈕，就能插入 emoji

        setup: (editor) => {

        const box = document.getElementById('editor-word-count');

        const render = () => {
            // 取純文字、去掉前後空白
            const text = (editor.getContent({ format: 'text' }) || '').trim();

            // 1) 中文字元：使用 Unicode Script=Han 抓取中日韓統一表意文字（常用中文字）
            const zhMatches = text.match(/[\p{Script=Han}]/gu) || [];
            const zhCount = zhMatches.length;

            // 2) 英文字母（A–Z / a–z）
            const enMatches = text.match(/[A-Za-z]/g) || [];
            const enCount = enMatches.length;

            // 3) 總字元數（不含任何空白）
            const total = text.replace(/\s/g, '').length;

            // 4) 其他字元 = 總字元數 − 中文 − 英文（包含數字、標點、符號、emoji…）
            const otherCount = Math.max(total - zhCount - enCount, 0);
            // 輸出到下方區塊（你也可以改成單行顯示）
                box.innerHTML = `
                    <ul style="list-style:none;padding:0;margin:0;">
                      <li>🀄 中文字元：<strong>${zhCount}</strong></li>
                      <li>🔤 英文字母：<strong>${enCount}</strong></li>
                      <li>✨ 其他字元：<strong>${otherCount}</strong></li>
                      <li>📊 總字元（不含空白）：<strong>${total}</strong></li>
                    </ul>
                `;
                };

            // 初始化與變更時都更新
            editor.on('init keyup change setcontent', render);
            // 即時預覽：監聽編輯器變動
            editor.on('init keyup change setcontent', () => {
            document.getElementById('live-preview').innerHTML = editor.getContent();
             });
        }
    });
</script>