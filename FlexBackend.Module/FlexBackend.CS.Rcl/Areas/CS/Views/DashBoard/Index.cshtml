@{
    ViewData["Title"] = "儀表板";
}

<div class="container-fluid">

    <!-- 標題列 + 區間選擇 -->
    <div class="d-sm-flex align-items-center justify-content-between mb-2">
        <h1 class="h3 mb-0 text-gray-800">儀表板</h1>
        <div class="d-flex align-items-center">
            <select id="rangeSelect" class="custom-select custom-select-sm mr-2" style="width: 120px">
                <option value="7">最近 7 天</option>
                <option value="30" selected>最近 30 天</option>
                <option value="90">最近 90 天</option>
            </select>
            <a href="javascript:void(0)" id="btnRefresh"
               class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
                <i class="fas fa-sync-alt fa-sm text-white-50"></i> 重新整理
            </a>
        </div>
    </div>

    <!-- ====== Global Toolbar（全域工具列） ====== -->
    <div class="card mb-3 shadow-sm" id="globalToolbar">
        <div class="card-body py-2">
            <div class="d-flex flex-wrap align-items-center gap-2">

             <!-- 品類下拉（改為打後端真資料） -->
<div class="mr-3 d-flex align-items-center">
  <span class="text-muted small mr-2">品類</span>
  <select id="categorySelect" class="custom-select custom-select-sm" style="min-width: 180px;">
    <option value="">全部</option> <!-- 其餘選項由 JS 動態注入 -->
  </select>
</div>


                <!-- 維度切換（日/週/月） -->
                <div class="btn-group btn-group-sm mr-3" role="group" aria-label="Dimension">
                    <button class="btn btn-outline-primary active" data-dim="day">日</button>
                    <button class="btn btn-outline-primary" data-dim="week">週</button>
                    <button class="btn btn-outline-primary" data-dim="month">月</button>
                </div>

                <!-- 同期比較（UI 先放） -->
                <div class="form-inline mr-3">
                    <div class="custom-control custom-switch mr-2">
                        <input type="checkbox" class="custom-control-input" id="switchCompare">
                        <label class="custom-control-label" for="switchCompare">同期比較</label>
                    </div>
                    <select id="compareType" class="custom-select custom-select-sm" style="width:160px" disabled>
                        <option value="last">對上期</option>
                        <option value="yoy">對去年同期</option>
                    </select>
                </div>

                <!-- 匯出 -->
                <div class="dropdown mr-3">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" data-toggle="dropdown">
                        匯出
                    </button>
                    <div class="dropdown-menu">
                        <!-- KPI 總表 -->
                        <h6 class="dropdown-header">📊 KPI 總表</h6>
                        <a class="dropdown-item" href="#" id="exportKpiCsv">CSV</a>
                        <a class="dropdown-item" href="#" id="exportKpiExcel">Excel</a>
                        <a class="dropdown-item" href="#" id="exportKpiPdf">PDF</a>
                        <div class="dropdown-divider"></div>

                        <!-- 異常清單 -->
                        <h6 class="dropdown-header">⚠️ 異常清單</h6>
                        <a class="dropdown-item" href="#" id="exportAnomaliesCsv">CSV</a>
                        <a class="dropdown-item" href="#" id="exportAnomaliesPdf">PDF</a>
                    </div>
                </div>

                <!-- 異常提示（徽章鉤子） -->
                <button class="btn btn-sm btn-outline-danger mr-3" id="btnAnomalies">
                    <i class="fas fa-exclamation-triangle"></i>
                    異常 <span class="badge badge-danger ml-1" id="badgeAnom" style="display:none">0</span>
                </button>

                <!-- 快速建立 -->
                <div class="dropdown mr-3">
                    <button class="btn btn-sm btn-success dropdown-toggle" data-toggle="dropdown">
                        快速建立
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="@Url.Content("~/PROD/Products/Create")">新增商品</a>
                        <a class="dropdown-item" href="@Url.Content("~/PROD/Promotions/Create")">新增活動</a>
                        <a class="dropdown-item" href="@Url.Content("~/ORD/Orders/Create")">新增訂單</a>
                    </div>
                </div>

                <!-- 自動刷新 + 最後更新時間 -->
                <div class="ml-auto d-flex align-items-center">
                    <div class="custom-control custom-switch mr-2">
                        <input type="checkbox" class="custom-control-input" id="switchAuto">
                        <label class="custom-control-label" for="switchAuto">自動刷新</label>
                    </div>
                    <select id="autoInterval" class="custom-select custom-select-sm mr-2" style="width:110px" disabled>
                        <option value="30">每 30 秒</option>
                        <option value="60" selected>每 60 秒</option>
                        <option value="300">每 5 分鐘</option>
                    </select>
                    <small class="text-muted">最後更新：<span id="lastUpdated">--</span></small>
                </div>

            </div>
        </div>
    </div>

    <!-- 銷售 KPI（只留與銷售有關的四張卡片） -->
    <div class="row">
		<!-- 近區間營收 -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">近區間營收</div>
                        <div id="kpi-range-revenue" class="h5 mb-0 font-weight-bold text-gray-800">--</div>
                    </div>
                    <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>

		<!-- 訂單數 -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">訂單數</div>
                        <div id="kpi-orders" class="h5 mb-0 font-weight-bold text-gray-800">--</div>
                    </div>
                    <i class="fas fa-file-invoice-dollar fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <div class="text-xs font-weight-bold text-info text-uppercase mb-1">售出數量</div>
                        <div id="kpi-units" class="h5 mb-0 font-weight-bold text-gray-800">--</div>
                    </div>
                    <i class="fas fa-cubes fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>

		<!-- 平均客單價 -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">平均客單價</div>
                        <div id="kpi-aov" class="h5 mb-0 font-weight-bold text-gray-800">--</div>
                    </div>
                    <i class="fas fa-hand-holding-usd fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- 圖表列：營收折線圖 -->
    <div class="row">
        <div class="col-xl-12 col-lg-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">
                        營收概況 <small class="text-muted ml-2" id="filterHint" style="display:none">(已套用品類篩選)</small>
                    </h6>
                </div>
                <div class="card-body">
                    <div class="chart-area"><canvas id="myAreaChart" height="120"></canvas></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 熱銷 Top + 品類排行 -->
    <div class="row">
		<!-- 熱銷商品表格 -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">熱銷商品 Top 10</h6>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="tblTopProductsWrap">
                            <thead class="thead-light">
                                <tr>
                                    <th style="width:70px">排名</th>
                                    <th>商品</th>
                                    <th class="text-right">銷量</th>
                                    <th class="text-right">營收</th>
                                    <th class="text-right">佔比</th>
                                </tr>
                            </thead>
                            <tbody id="tblTopProducts">
                                <!-- 由 JS 動態注入 -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">品類銷售排行（營收）</h6>
                </div>
                <div class="card-body">
                    <canvas id="catBarChart" height="260"></canvas>
                </div>
            </div>
        </div>
    </div>

</div>

<!-- Chart.js（v4） -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4"></script>

<style>
    /* 小樣式微調：chips 間距與列印視圖 */
    #globalToolbar .btn-group .btn {
        margin: 2px;
    }

   
    @@media print {
        #globalToolbar, #rangeSelect, #btnRefresh, .dropdown, .custom-select, .custom-control

    {
        display: none !important;
    }

    .card {
        box-shadow: none !important;
    }

    }
</style>

<script>
    /* ====== 本地化格式工具 ====== */
    const fmtMoney = new Intl.NumberFormat('zh-TW', { style: 'currency', currency: 'TWD', maximumFractionDigits: 0 });
    const fmtInt   = new Intl.NumberFormat('zh-TW');
    const fmtDate  = d => new Date(d).toLocaleDateString('zh-TW', { month: '2-digit', day: '2-digit' });

    /* ====== 狀態 ====== */
    const state = {
      days: 30,
      dimension: 'day',        // day | week | month
      category: '',            // '' = 全部
      compare: { enabled: false, type: 'last' }, // last | yoy
      auto: { enabled: false, ms: 60000, timer: null },
      cache: { overview: null, tpsrc: null }     // ⚠ 修正鍵名：tpsrc
    };

    /* ====== 圖表實例 ====== */
    let areaChart = null, catBarChart = null;

    /* ====== 共用：CSV 下載器與 BOM（避免 Excel 亂碼） ====== */
    const CSV_BOM = '\uFEFF';
    function downloadFile(content, filename, mime) {
      const blob = new Blob([content], { type: mime });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = filename;
      a.click();
      URL.revokeObjectURL(a.href);
    }

    /* ====== 維度彙總（週/月） ====== */
    function aggregate(labelsISO, series, mode) {
      if (mode === 'day') return { labels: labelsISO.map(fmtDate), data: series };
      const map = new Map();
      const keyOf = (d) => {
        const dt = new Date(d);
        if (mode === 'week') {
          const day = (dt.getDay() + 6) % 7; // 0..6 (Mon..Sun)
          const monday = new Date(dt); monday.setDate(dt.getDate() - day);
          monday.setHours(0,0,0,0);
          const key = monday.toISOString().slice(0,10);
          const label = `W${getISOWeek(dt)} (${monday.getMonth()+1}/${('0'+monday.getDate()).slice(-2)})`;
          return [key, label];
        } else {
          const key = `${dt.getFullYear()}-${('0'+(dt.getMonth()+1)).slice(-2)}`;
          const label = key; return [key, label];
        }
      };
      labelsISO.forEach((d, i) => {
        const [key, label] = keyOf(d);
        const prev = map.get(key) || { label, sum: 0 };
        prev.sum += Number(series[i] || 0);
        map.set(key, prev);
      });
      const labels = Array.from(map.values()).map(v => v.label);
      const data   = Array.from(map.values()).map(v => v.sum);
      return { labels, data };
    }
    function getISOWeek(d){
      const date = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
      const dayNum = date.getUTCDay() || 7;
      date.setUTCDate(date.getUTCDate() + 4 - dayNum);
      const yearStart = new Date(Date.UTC(date.getUTCFullYear(),0,1));
      return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);
    }

    /* ====== 銷售 KPI ====== */
    function updateSalesKpis(k) {
      document.getElementById('kpi-range-revenue').textContent = fmtMoney.format(k.totalRevenue ?? 0);
      document.getElementById('kpi-orders').textContent        = fmtInt.format(k.totalOrders ?? 0);
      document.getElementById('kpi-units').textContent         = fmtInt.format(k.unitsSold ?? 0);
      document.getElementById('kpi-aov').textContent           = fmtMoney.format(k.aov ?? 0);
    }

    /* ====== 折線圖 ====== */
    function buildAreaChart(labelsISO, net, orders) {
      const ctx = document.getElementById('myAreaChart'); if (!ctx) return;
      if (areaChart) areaChart.destroy();
      const aggNet    = aggregate(labelsISO, net, state.dimension);
      const aggOrders = aggregate(labelsISO, orders, state.dimension);
      areaChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: aggNet.labels,
          datasets: [
            { label: '營收', data: aggNet.data, fill: true, borderWidth: 2, tension: 0.35 },
            { label: '訂單數', data: aggOrders.data, yAxisID: 'y1', borderWidth: 2, borderDash: [6,4], tension: 0.3 }
          ]
        },
        options: {
          responsive: true, maintainAspectRatio: false,
          interaction: { mode: 'index', intersect: false },
          plugins: {
            tooltip: {
              callbacks: {
                label: (ctx) => ctx.dataset.label === '營收'
                  ? `營收：${fmtMoney.format(ctx.parsed.y)}`
                  : `訂單數：${fmtInt.format(ctx.parsed.y)}`
              }
            },
            legend: { labels: { boxWidth: 12 } }
          },
          scales: {
            y:  { beginAtZero: true, title: { display: true, text: '金額' },
                  ticks: { callback: v => fmtMoney.format(v) } },
            y1: { beginAtZero: true, position:'right', grid:{ drawOnChartArea:false },
                  title:{ display:true, text:'筆數' } }
          }
        }
      });
    }

    /* ====== 橫向長條（品類營收） ====== */
    function buildCatBarChart(labels, revenue) {
      const ctx = document.getElementById('catBarChart'); if (!ctx) return;
      if (catBarChart) catBarChart.destroy();
      catBarChart = new Chart(ctx, {
        type: 'bar',
        data: { labels, datasets: [{ label: '營收', data: revenue }] },
        options: {
          indexAxis: 'y',
          responsive: true, maintainAspectRatio: false,
          scales: { x: { ticks: { callback: v => fmtMoney.format(v) } } },
          plugins: {
            tooltip: { callbacks: { label: c => `營收：${fmtMoney.format(c.parsed.x)}` } },
            legend: { display: false }
          }
        }
      });
    }

    /* ====== 熱銷 Top 表格 ====== */
    function renderTopTable(list) {
      const tbody = document.getElementById('tblTopProducts');
      tbody.innerHTML = '';
      list.forEach(p => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="text-muted">#${p.rank}</td>
          <td>
            <div class="d-flex flex-column">
              <span class="font-weight-bold">${p.name}</span>
              <small class="text-muted">SKU：${p.sku}　|　分類：${p.category}</small>
            </div>
          </td>
          <td class="text-right">${fmtInt.format(p.qty)}</td>
          <td class="text-right">${fmtMoney.format(p.revenue)}</td>
          <td class="text-right">${p.share}%</td>`;
        tbody.appendChild(tr);
      });
    }

    /* ====== 取數 API ====== */
    async function fetchOverview(days) {
      const url = '@Url.Content("~/api/cs/dashboard/overview")' + `?days=${encodeURIComponent(days)}`;
      const resp = await fetch(url, { headers: { 'Accept': 'application/json' } });
      if (!resp.ok) throw new Error(`Overview HTTP ${resp.status}`);
      return await resp.json();
    }
async function fetchTops(days, top = 10) {
  const q = new URLSearchParams({
    days: String(days),
    top: String(top),
    category: state.category || ''   // ★ 新增
  }).toString();
  const url = '@Url.Content("~/api/cs/dashboard/tops")' + `?${q}`;
  const resp = await fetch(url, { headers: { 'Accept': 'application/json' } });
  if (!resp.ok) throw new Error(`Tops HTTP ${resp.status}`);
  return await resp.json();
}


 

    /* ====== 整體刷新 ====== */
   async function refresh(days = state.days) {
  try {
    state.days = days;

    // 1) 折線圖
    const ov = await fetchOverview(days);
    state.cache.overview = ov;

    // 2) KPI + Top + 分類（已由後端依 category 篩選）
    const tp = await fetchTops(days, 10);
    state.cache.tpsrc = tp;

    // 顯示「已套用品類篩選」
    document.getElementById('filterHint').style.display = state.category ? '' : 'none';

    // KPI
    updateSalesKpis(tp.kpi || {});

    // 表格
    const list = (tp.topProducts || []).map(x => ({
      rank: x.rank, sku: x.sku, name: x.name, category: x.category,
      qty: x.qty, revenue: x.revenue, share: x.share
    }));
    state.viewTopList = list;
    renderTopTable(list);

    // 品類長條
    const labels = tp.categories?.labels || [];
    const revenue = tp.categories?.revenue || [];
    buildCatBarChart(labels, revenue);

    // 折線圖
    buildAreaChart(ov.labels, ov.net, ov.orders);

    // 其他 UI
    document.getElementById('lastUpdated').textContent =
      new Date().toLocaleString('zh-TW', { hour12: false });

    const anom = (tp.kpi?.aov ?? 0) <= 0 ? 1 : 0;
    const badge = document.getElementById('badgeAnom');
    badge.textContent = anom;
    badge.style.display = anom > 0 ? '' : 'none';

  } catch (err) {
    console.error('Dashboard refresh error:', err);
  }
}

    // 取品類清單（打後端）
async function fetchProductTypes() {
  const url = '@Url.Content("~/api/cs/dashboard/productTypes")';
  const resp = await fetch(url, { headers: { 'Accept': 'application/json' } });

  // 先讀文字，方便 debug
  const text = await resp.text();
  const ct = resp.headers.get('content-type') || '';

  if (!resp.ok) {
    console.error('productTypes HTTP', resp.status, text);
    throw new Error(`productTypes HTTP ${resp.status}`);
  }

  if (!ct.includes('application/json')) {
    console.error('⚠️ productTypes 回傳的不是 JSON，內容前 200 字：', text.slice(0, 200));
    throw new Error('productTypes 回傳 HTML（可能是登入頁/錯誤頁），不是 JSON');
  }

  return JSON.parse(text);
}


// 建立下拉選單
// 建立下拉選單（正確）
async function loadCategories() {
  const sel = document.getElementById('categorySelect');
  if (!sel) return;

  // 先放「全部」
  sel.innerHTML = '<option value="">全部</option>';

  try {
    const types = await fetchProductTypes(); // 期待 [{ code, name }, ...]
    types.forEach(t => {
      const opt = document.createElement('option');
      opt.value = t.code;          // 例如 'HERB'、'VITA'、'__NULL__'
      opt.textContent = t.name;    // 例如 '草本補充品'
      sel.appendChild(opt);
    });
  } catch (err) {
    console.error('loadCategories failed:', err);
  }
}



    /* ====== 初始化事件 ====== */
    (function init() {
      // 先載入品類選項
  loadCategories().then(() => refresh(30));

  // 區間選擇 & 手動重新整理
  document.getElementById('rangeSelect').addEventListener('change', e => refresh(parseInt(e.target.value, 10)));
  document.getElementById('btnRefresh').addEventListener('click', () => {
    const days = parseInt(document.getElementById('rangeSelect').value, 10) || 30;
    refresh(days);
  });

  // 維度切換
  document.querySelectorAll('[data-dim]').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('[data-dim]').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      state.dimension = btn.dataset.dim;
      const ov = state.cache.overview || { labels:[], net:[], orders:[] };
      buildAreaChart(ov.labels, ov.net, ov.orders);
    });
  });

  // 品類下拉：變更就刷新（後端會依 category 篩選）
  document.getElementById('categorySelect').addEventListener('change', (e) => {
    state.category = e.target.value || '';  // '' | '__NULL__' | 真實 Code
    refresh(state.days);
  });

      // 同期比較（UI 先放）
      const switchCompare = document.getElementById('switchCompare');
      const compareType = document.getElementById('compareType');
      switchCompare.addEventListener('change', () => {
        state.compare.enabled = switchCompare.checked;
        compareType.disabled = !switchCompare.checked;
        state.compare.type = compareType.value;
        // TODO: 之後你有 API 時，在這裡呼叫並疊第二條線
      });
      compareType.addEventListener('change', () => state.compare.type = compareType.value);

     

      /* ====== 匯出功能 ====== */

      // KPI -> CSV（UTF-8 BOM）
      document.getElementById('exportKpiCsv').addEventListener('click', (e) => {
        e.preventDefault();
        const k = state.cache.tpsrc?.kpi || {};
        const rows = [
          ['指標','數值'],
          ['營收', k.totalRevenue ?? 0],
          ['訂單數', k.totalOrders ?? 0],
          ['售出數量', k.unitsSold ?? 0],
          ['平均客單價', k.aov ?? 0]
        ];
        const csv = rows.map(r => r.join(',')).join('\n');
        downloadFile(CSV_BOM + csv, `kpi_${Date.now()}.csv`, 'text/csv;charset=utf-8;');
      });

        // KPI -> Excel（呼叫後端 ClosedXML API + cache-busting）
    const elExcel = document.getElementById('exportKpiExcel');
    if (elExcel) {
      elExcel.addEventListener('click', (e) => {
        e.preventDefault();
        const days = parseInt(document.getElementById('rangeSelect').value, 10) || 30;
        const url = '@Url.Content("~/api/cs/export/kpi")' + `?days=${days}&_=${Date.now()}`;
        // 用 location.href 避免被視為彈窗而被瀏覽器擋掉
        location.href = url;
      });
    }

      // KPI -> PDF（瀏覽器列印）
      document.getElementById('exportKpiPdf').addEventListener('click', (e) => {
        e.preventDefault();
        window.print();
      });

      // 異常清單 CSV / PDF
      document.getElementById('exportAnomaliesCsv').addEventListener('click', (e) => {
        e.preventDefault();
        const k = state.cache.tpsrc?.kpi || {};
        const anomalies = [];
        if ((k.aov ?? 0) <= 0) anomalies.push(['平均客單價', '為 0，可能有資料異常']);
        if ((k.totalRevenue ?? 0) < 1000) anomalies.push(['營收過低', k.totalRevenue ?? 0]);
        const rows = [['項目','說明'], ...anomalies];
        const csv = rows.map(r => r.join(',')).join('\n');
        downloadFile(CSV_BOM + csv, `anomalies_${Date.now()}.csv`, 'text/csv;charset=utf-8;');
      });
        // 異常清單 -> PDF (原本缺少這段)
    document.getElementById('exportAnomaliesPdf').addEventListener('click', (e) => {
        e.preventDefault();

        // 重複使用 CSV 的邏輯來抓取異常資料
        const k = state.cache.tpsrc?.kpi || {};
        const anomalies = [];
        if ((k.aov ?? 0) <= 0) anomalies.push(['平均客單價', '為 0，可能有資料異常']);
        if ((k.totalRevenue ?? 0) < 1000) anomalies.push(['營收過低', k.totalRevenue ?? 0]);

        // 產生一個簡單的 HTML 報表字串
        let htmlContent = `
            <style>
                body { font-family: sans-serif; }
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
            </style>
            <h2>異常清單報表</h2>
            <p>報表產生時間：${new Date().toLocaleString('zh-TW')}</p>
            <hr>
            <table>
                <thead>
                    <tr>
                        <th>項目</th>
                        <th>說明</th>
                    </tr>
                </thead>
                <tbody>
        `;

        if (anomalies.length > 0) {
            anomalies.forEach(item => {
                htmlContent += `<tr><td>${item[0]}</td><td>${item[1]}</td></tr>`;
            });
        } else {
            htmlContent += `<tr><td colspan="2">太棒了！目前沒有發現任何異常。</td></tr>`;
        }

        htmlContent += `
                </tbody>
            </table>
        `;

        // 開一個新視窗並觸發列印
        const printWindow = window.open('', '_blank');
        printWindow.document.write(htmlContent);
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
    });
        // 取得目前「最近 X 天」下拉框的值
        function getSelectedDays(){ return parseInt(document.getElementById('rangeSelect')?.value,10) || 30; }

    document.getElementById('globalToolbar').addEventListener('click', (e) => {
      const a = e.target.closest('a.js-export-orders, a.js-export-items');
      if (!a) return;
      e.preventDefault();
      const days = getSelectedDays();
      const base = a.classList.contains('js-export-orders')
        ? '/api/cs/export/orders-csv'
        : '/api/cs/export/order-items-csv';
      location.href = `${base}?days=${days}&_=${Date.now()}`;
    });


      // 異常提示鉤子
      document.getElementById('btnAnomalies').addEventListener('click', () => {
        alert('異常清單（示範）：\n1) AOV 為 0（請檢查訂單金額或退款資料）');
      });

      // 自動刷新
      const switchAuto = document.getElementById('switchAuto');
      const autoInterval = document.getElementById('autoInterval');
      switchAuto.addEventListener('change', () => {
        state.auto.enabled = switchAuto.checked;
        autoInterval.disabled = !switchAuto.checked;
        if (state.auto.timer) { clearInterval(state.auto.timer); state.auto.timer = null; }
        if (state.auto.enabled) {
          const ms = parseInt(autoInterval.value, 10) * 1000;
          state.auto.ms = ms;
          state.auto.timer = setInterval(() => refresh(state.days), ms);
          refresh(state.days); // 立即刷新一次
        }
      });
      autoInterval.addEventListener('change', () => {
        if (!state.auto.enabled) return;
        if (state.auto.timer) clearInterval(state.auto.timer);
        state.auto.ms = parseInt(autoInterval.value, 10) * 1000;
        state.auto.timer = setInterval(() => refresh(state.days), state.auto.ms);
      });
    })();
</script>
